<HTML>
<HEAD>
<TITLE>object utilities</TITLE>
</HEAD>

<BODY bgcolor=#000000 text=#FF9966 link=#FF6600 vlink=#FFCC99 alink=#FFCC99><CENTER> <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0> <TR>
<TD ALIGN="left" VALIGN="top" WIDTH=550><BR>
<H3> object utilities (#53)</H3>
(an instance of <A HREF="HTM_000124.htm">Generic Utilities Package</A> made by <A HREF="HTM_000002.htm">The_Mayor</A>)
<BR>
<BR>
&nbsp&nbsp&nbsp&nbsp&nbspThese routines are useful for finding out information about individual objects.
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp
<BR>
&nbsp&nbsp&nbsp&nbsp&nbspExamining everything an object has defined on it:
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp  all_verbs          (object) => like it says
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp  all_properties     (object) => likewise
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp  findable_properties(object) => tests to see if caller can "find" them
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp  owned_properties   (object[, owner]) => tests for ownership
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp
<BR>
&nbsp&nbsp&nbsp&nbsp&nbspInvestigating inheritance:
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp  ancestors(object[,object...]) => all ancestors
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp  descendants      (object)     => all descendants
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp  ordered_descendants(object)   => descendants, in a different order
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp  leaves           (object)     => descendants with no children
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp  branches         (object)     => descendants with children 
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp  isa        (object,class) => true iff object is a descendant of class (or ==)
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp
<BR>
&nbsp&nbsp&nbsp&nbsp&nbspConsidering containment:
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp  contains      (obj1, obj2) => Does obj1 contain obj2 (nested)?
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp  all_contents      (object) => return all the (nested) contents of object
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp
<BR>
&nbsp&nbsp&nbsp&nbsp&nbspVerifying verbs and properties:
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp  has_property(object,pname) => false/true   according as object.(pname) exists
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp  has_verb    (object,vname) => false/{#obj} according as object:(vname) exists
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp  has_callable_verb          => same, but verb must be callable from a program
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp  match_verb  (object,vname) => false/{location, newvname}
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp                               (identify location and usable name of verb)
<BR>
<BR>
<BR>
<BR>
VERB SOURCE CODE:
<BR>
<BR>
has_property:
<pre>
object = args[1];
prop = args[2];
if (prop in $code_utils.builtin_props)
    return valid(object);
else
    return !(!property_info(object, prop));
endif
.

</pre>
<BR>
all_properties:
<pre>
what = args[1];
if (what.owner != caller_perms())
    set_task_perms(caller_perms());
endif
props = properties(what) || {};
while (valid(what = parent(what)))
    props = {@properties(what) || {}, @props};
endwhile
return props;
.

</pre>
<BR>
has_verb:
<pre>
":has_verb(OBJ object, STR verbname)";
"Find out if an object has a verb matching the given verbname.";
"Returns {location} if so, 0 if not, where location is the object or the ancestor 
on which the verb is actually defined.";
object = args[1];
verbname = args[2];
while (E_VERBNF == (vi = verb_info(object, verbname)))
    object = parent(object);
endwhile
return vi ? {object} | 0;
.

</pre>
<BR>
has_callable_verb:
<pre>
"Usage:  has_callable_verb(object, verb)";
"See if an object has a verb that can be called by another verb (i.e., that has its 
x permission bit set).";
"Return {location}, where location is the object that defines the verb, or 0 if the 
object doesn't have the verb.";
object = args[1];
verbname = args[2];
while (valid(object))
    if (index(verb_info(object, verbname)[2], "x") && verb_code(object, verbname))
        return {object};
    endif
    object = parent(object);
endwhile
return 0;
.

</pre>
<BR>
all_verbs:
<pre>
what = args[1];
if (what.owner != caller_perms())
    set_task_perms(caller_perms());
endif
verbs = {};
while (valid(what))
    verbs = {@verbs(what) || {}, @verbs};
    what = parent(what);
endwhile
return verbs;
.

</pre>
<BR>
match_verb:
<pre>
":match_verb(OBJ object, STR verb)";
"Find out if an object has a given verb, and some information about it.";
"Returns {OBJ location, STR verb} if matched, 0 if not.";
"Location is the object on which it is actually defined, verb is a name";
"for the verb which can subsequently be used in verb_info (i.e., no";
"asterisks).";
verbname = strsub(args[2], "*", "");
object = args[1];
while (E_VERBNF == (info = verb_info(object, verbname)))
    object = parent(object);
endwhile
return info ? {object, verbname} | 0;
.

</pre>
<BR>
isa:
<pre>
":isa(x,y) == valid(x) && (y==x || y in :ancestors(x))";
what = args[1];
targ = args[2];
while (valid(what))
    if (what == targ)
        return 1;
    endif
    what = parent(what);
endwhile
return 0;
.

</pre>
<BR>
ancestors:
<pre>
"Usage:  ancestors(object[, object...])";
"Return a list of all ancestors of the object(s) in args, with no duplicates.";
"If called with a single object, the result will be in order ascending up the inheritance 
hierarchy.  If called with multiple objects, it probably won't.";
ret = {};
for o in (args)
    what = o;
    while (valid(what = parent(what)))
        ret = setadd(ret, what);
    endwhile
endfor
return ret;
.

</pre>
<BR>
descendants descendents:
<pre>
what = args[1];
kids = children(what);
result = {};
for x in (kids)
    result = {@result, @this:descendants(x)};
endfor
return {@kids, @result};
.

</pre>
<BR>
descendants_suspended descendents_suspended:
<pre>
set_task_perms(caller_perms());
what = args[1];
kids = children(what);
result = {};
for x in (kids)
    result = {@result, @this:descendants_suspended(x)};
endfor
$command_utils:suspend_if_needed(0);
return {@kids, @result};
.

</pre>
<BR>
ordered_descendants:
<pre>
r = {what = args[1]};
for k in (children(what))
    r = {@r, @this:(verb)(k)};
endfor
return r;
.

</pre>
<BR>
branches:
<pre>
":branches(object) => list of all descendants of object which have children.";
if (kids = children(object = args[1]))
    s = {object};
    for k in (kids)
        s = {@s, @this:branches(k)};
    endfor
    return s;
else
    return {};
endif
.

</pre>
<BR>
branches_suspended:
<pre>
":branches_suspended(object) => descendants of object having children.";
"this version calls suspend(0) as needed";
set_task_perms(caller_perms());
if (kids = children(object = args[1]))
    s = {object};
    for k in (kids)
        $command_utils:suspend_if_needed(0);
        s = {@s, @this:branches_suspended(k)};
    endfor
    return s;
else
    return {};
endif
.

</pre>
<BR>
leaves:
<pre>
":leaves(object) => list of all childless descendents of object";
s = {};
for k in (children(args[1]))
    s = {@s, @this:leaves(k)};
endfor
return s || {args[1]};
.

</pre>
<BR>
leaves_suspended:
<pre>
":leaves_suspended(object) => list of all childless descendents of object";
"this versions calls suspend(0) as needed";
set_task_perms(caller_perms());
s = {};
for k in (children(args[1]))
    $command_utils:suspend_if_needed(0);
    s = {@s, @this:leaves_suspended(k)};
endfor
return s || {args[1]};
.

</pre>
<BR>
contains:
<pre>
"$object_utils:contains(obj1, obj2) -- does obj1 contain obj2?";
"";
"Return true iff obj2 is under obj1 in the containment hierarchy; that is, if obj1 
is obj2's location, or its location's location, or ...";
loc = args[1];
what = args[2];
while (valid(what))
    what = what.location;
    if (what == loc)
        return valid(loc);
        return 1;
    endif
endwhile
return 0;
.

</pre>
<BR>
all_contents:
<pre>
"all_contents(object)";
"Return a list of all objects contained (at some level) by object.";
res = {};
for y in (args[1].contents)
    res = {@res, y, @$object_utils:all_contents(y)};
endfor
return res;
.

</pre>
<BR>
findable_properties:
<pre>
"findable_properties(object)";
"Return a list of properties on those members of object's ancestor list that are 
readable or are owned by the caller (or all properties if the caller is a wizard).";
what = args[1];
props = {};
who = caller_perms();
while (what != $nothing)
    if ((what.r || (who == what.owner)) || who.wizard)
        props = {@properties(what), @props};
    endif
    what = parent(what);
endwhile
return props;
.

</pre>
<BR>
owned_properties:
<pre>
"owned_properties(what[, who])";
"Return a list of all properties on WHAT owned by WHO.";
"Only wizardly verbs can specify WHO; mortal verbs can only search for properties 
owned by their own owners.  For more information, talk to Gary_Severn.";
what = anc = args[1];
who = ((c = caller_perms()).wizard && (length(args) > 1)) ? args[2] | c;
props = {};
while (anc != $nothing)
    for k in (properties(anc))
        if (property_info(what, k)[1] == who)
            props = listappend(props, k);
        endif
    endfor
    anc = parent(anc);
endwhile
return props;
.

</pre>
<BR>
property_conflicts:
<pre>
":property_conflicts(object,newparent)";
"Looks for propertyname conflicts that would keep chparent(object,newparent)";
"  from working.";
"Returns a list of elements of the form {<propname>, @<objectlist>}";
"where <objectlist> is list of descendents of object defining <propname>.";
if (!valid(object = args[1]))
    return E_INVARG;
elseif (!valid(newparent = args[2]))
    return (newparent == #-1) ? {} | E_INVARG;
elseif (!($perm_utils:controls(caller_perms(), object) && (newparent.f || $perm_utils:controls(caller_perms(), 
newparent))))
    "... if you couldn't chparent anyway, you don't need to know...";
    return E_PERM;
endif
"... properties existing on newparent";
"... cannot be present on object or any descendent...";
props = conflicts = {};
for o in ({object, @$object_utils:descendents_suspended(object)})
    for p in (properties(o))
        if (property_info(newparent, p))
            if (i = p in props)
                conflicts[i] = {@conflicts[i], o};
            else
                props = {@props, p};
                conflicts = {@conflicts, {p, o}};
            endif
        endif
        $command_utils:suspend_if_needed(0);
    endfor
    $command_utils:suspend_if_needed(0);
endfor
return conflicts;
.

</pre>
<BR>
descendants_with_property_suspended:
<pre>
":descendants_with_property_suspended(object,property)";
" => list of descendants of object on which property is defined.";
"calls suspend(0) as needed";
object = args[1];
if ((caller == this) || (object.w || $perm_utils:controls(caller_perms(), object)))
    $command_utils:suspend_if_needed(0);
    if (property_info(@args))
        return {object};
    endif
    r = {};
    prop = args[2];
    for c in (children(object))
        r = {@r, @this:descendants_with_property_suspended(c, prop)};
    endfor
    return r;
else
    return E_PERM;
endif
.

</pre>
<BR>
locations:
<pre>
"Usage:  locations(object)";
"Return a listing of the location hierarchy above object.";
ret = {};
what = args[1];
while (valid(what = what.location))
    ret = {@ret, what};
endwhile
return ret;
.

</pre>
<BR>
all_properties_suspended:
<pre>
"Copied from object utilities (#3669):all_properties by Haakon (#2) Mon Dec 28 14:24:36 
1992 PST";
what = args[1];
if (what.owner != caller_perms())
    set_task_perms(caller_perms());
endif
props = properties(what) || {};
while (valid(what = parent(what)))
    props = {@properties(what) || {}, @props};
    $command_utils:suspend_if_needed(0);
endwhile
return props;
.

</pre>
<BR>
connected:
<pre>
":connected(object) => true iff object is a connected player.";
"equivalent to (object in connected_players()) perhaps with less server overhead";
"use object:is_listening() if you want to allow for puppets and other non-player 
objects that still 'care' about what's said.";
return 1 + connected_seconds(@args);
.

</pre>
<BR>
isoneof:
<pre>
":isoneof(x,y) = x isa z, for some z in list y";
what = args[1];
targ = args[2];
while (valid(what))
    if (what in targ)
        return 1;
    endif
    what = parent(what);
endwhile
return 0;
.

</pre>
<BR>
<BR>
PROPERTY DATA:
<BR>
<RB>
</TR>
</TABLE>
</CENTER>
</BODY>
</HTML>
