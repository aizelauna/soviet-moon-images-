<HTML>
<HEAD>
<TITLE>@paranoid database</TITLE>
</HEAD>

<BODY bgcolor=#000000 text=#FF9966 link=#FF6600 vlink=#FFCC99 alink=#FFCC99><CENTER> <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0> <TR>
<TD ALIGN="left" VALIGN="top" WIDTH=550><BR>
<H3> @paranoid database (#68)</H3>
(an instance of <A HREF="HTM_000001.htm">Root Class</A> made by <A HREF="HTM_000038.htm">Hacker</A>)
<BR>
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp
<BR>
&nbsp&nbsp&nbsp&nbsp&nbspThis object stores the @paranoid data from :tell.  Normally it is not necessary to access these things directly.  All verbs are controlled by a caller_perms() check.  All data is stored in the old .responsible format.
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp:add_data(who,data) adds one line's worth of data to the collection, trimming from the front as necessary.
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp:get_data(who) retrieves the entire batch of data.
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp:erase_data(who) sets the data to {}
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp:set_kept_lines(who,number) Changes the number of kept lines.  Maximum is 20.
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp
<BR>
&nbsp&nbsp&nbsp&nbsp&nbspCore verbs that call the above are this are $player:tell, @check, @paranoid, and :erase_paranoid_data.
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp
<BR>
&nbsp&nbsp&nbsp&nbsp&nbspInternal:  
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp   Properties used are
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp   tostr(player)+"lines"
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp   tostr(player)+"pdata"
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp   :ensure_props_exist(who,linesname,dataname):  creates the above
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp   :GC() --- loops over all data and verifies they're for players.
<BR>
<BR>
Go to location of this object, <A HREF="HTM_000179.htm">Cluttered Closet</A>.
<BR>
<BR>
<BR>
<BR>
VERB SOURCE CODE:
<BR>
<BR>
ensure_props_exist:
<pre>
"*Must* be called with PDATA first, and LINES second.";
if ((caller != this) && (!caller_perms().wizard))
    return E_PERM;
else
    if (this.(args[2]) == E_PROPNF)
        add_property(this, args[2], {}, {$hacker, ""});
    endif
    if (this.(args[3]) == E_PROPNF)
        add_property(this, args[3], 0, {$hacker, ""});
    endif
endif
.

</pre>
<BR>
init_for_core:
<pre>
if (!caller_perms().wizard)
    return;
else
    for x in (properties(this))
        delete_property(this, x);
        $command_utils:suspend_if_needed(0);
    endfor
endif
.

</pre>
<BR>
add_data:
<pre>
who = args[1];
if ($perm_utils:controls(caller_perms(), who))
    d = tostr(who, "pdata");
    l = tostr(who, "lines");
    this:ensure_props_exist(who, d, l);
    data = this.(d);
    lines = this.(l);
    "Icky G7 code copied straight out of $player:tell.";
    if (((len = length(this.(d) = {@data, args[2]})) * 2) > (lines * 3))
        this.(d) = this.(d)[(len - lines) + 1..len];
    endif
else
    return E_PERM;
endif
.

</pre>
<BR>
get_data:
<pre>
who = args[1];
if ($perm_utils:controls(caller_perms(), who))
    d = tostr(who, "pdata");
    if (typeof(this.(d)) == LIST)
        return this.(d);
    else
        return {};
    endif
else
    return E_PERM;
endif
.

</pre>
<BR>
erase_data:
<pre>
who = args[1];
if ($perm_utils:controls(caller_perms(), who))
    d = tostr(who, "pdata");
    "OK if this would toss its cookies if no prop, no damage.";
    this.(d) = {};
else
    return E_PERM;
endif
.

</pre>
<BR>
set_kept_lines:
<pre>
maximum = 20;
who = args[1];
if ($perm_utils:controls(caller_perms(), who))
    l = tostr(who, "lines");
    this:ensure_props_exist(who, l, l);
    this.(l) = min(args[2], maximum);
else
    return E_PERM;
endif
.

</pre>
<BR>
gc:
<pre>
threshold = ((60 * 60) * 24) * 3;
for x in (properties(this))
    l = length(x);
    who = toobj(x[1..l - 5]);
    if (((!valid(who)) || (!is_player(who))) || (!who.paranoid))
        delete_property(this, x);
    else
        if (index(x, "lines"))
            if (typeof(this.(x)) != NUM)
                this.(x) = 10;
            endif
        elseif (index(x, "pdata"))
            if ((who.last_disconnect_time < (time() - threshold)) && (who.last_connect_time 
< (time() - threshold)))
                this.(x) = {};
            endif
            if (typeof(this.(x)) != LIST)
                this.(x) = {};
            endif
        endif
    endif
    $command_utils:suspend_if_needed(0);
endfor
.

</pre>
<BR>
help_msg:
<pre>
return this:description();
.

</pre>
<BR>
<BR>
PROPERTY DATA:
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #100pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #100lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #95pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #95lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #116pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #116lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #293pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #293lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #445pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #445lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #478lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #478pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #103lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #215lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #215pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #103pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #494lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #494pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #509lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #509pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #299lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #299pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #806lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #806pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #96lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #96pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #352lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #352pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #1149lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #1149pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #1185lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #1185pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #302lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #302pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #297lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #297pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #1399lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #1399pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #907lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #1473lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #1473pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #907pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #875lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #875pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #883lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #883pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #538lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #538pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #539lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #539pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #78lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #78pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #2230lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #2230pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #1551lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #1551pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #381lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #2082lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #2082pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #2372lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #2372pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #558lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #558pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #2376lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #2376pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #2021lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #2021pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #2486lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #2486pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #888lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #2316lines
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #2316pdata
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp #2666lines
<BR>
<RB>
</TR>
</TABLE>
</CENTER>
</BODY>
</HTML>
