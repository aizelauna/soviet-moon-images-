<HTML>
<HEAD>
<TITLE>Programmer Options</TITLE>
</HEAD>

<BODY bgcolor=#000000 text=#FF9966 link=#FF6600 vlink=#FFCC99 alink=#FFCC99><CENTER> <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0> <TR>
<TD ALIGN="left" VALIGN="top" WIDTH=550><BR>
<H3> Programmer Options (#148)</H3>
(an instance of <A HREF="HTM_000067.htm">Generic Option Package</A> made by <A HREF="HTM_000100.htm">Dred</A>)
<BR>
<BR>
&nbsp&nbsp&nbsp&nbsp&nbspOption package for $prog commands.  See `help @prog-options'.
<BR>
<BR>
Go to location of this object, <A HREF="HTM_000179.htm">Cluttered Closet</A>.
<BR>
<BR>
<BR>
<BR>
VERB SOURCE CODE:
<BR>
<BR>
actual:
<pre>
if (i = args[1] in {"list_numbers"})
    return {{{"list_no_numbers"}[i], !args[2]}};
else
    return {args};
endif
.

</pre>
<BR>
show:
<pre>
if (o = (name = args[2]) in {"list_numbers"})
    args[2] = {"list_no_numbers"}[o];
    return {@pass(@args), tostr("(", name, " is a synonym for -", args[2], ")")};
else
    return pass(@args);
endif
.

</pre>
<BR>
show_verb_args:
<pre>
if (value = this:get(@args))
    return {value, {tostr("Default args for @verb:  ", $string_utils:from_list(value, 
" "))}};
else
    return {0, {"Default args for @verb:  none none none"}};
endif
.

</pre>
<BR>
check_verb_args:
<pre>
value = args[1];
if (typeof(value) != LIST)
    return "List expected";
elseif (length(value) != 3)
    return "List of length 3 expected";
elseif (!(value[1] in {"this", "none", "any"}))
    return tostr("Invalid dobj specification:  ", value[1]);
elseif (!((p = $code_utils:short_prep(value[2])) || (value[2] in {"none", "any"})))
    return tostr("Invalid preposition:  ", value[2]);
elseif (!(value[3] in {"this", "none", "any"}))
    return tostr("Invalid iobj specification:  ", value[3]);
else
    if (p)
        value[2] = p;
    endif
    return {value};
endif
.

</pre>
<BR>
parse_verb_args:
<pre>
oname = args[1];
raw = args[2];
if (typeof(raw) == STR)
    raw = $string_utils:explode(raw, " ");
elseif (typeof(raw) == NUM)
    return raw ? {oname, {"this", "none", "this"}} | {oname, 0};
endif
value = $code_utils:parse_argspec(@raw);
if (typeof(value) != LIST)
    return tostr(value);
elseif (value[2])
    return tostr("I don't understand \"", $string_utils:from_list(value[2], " "), 
"\"");
else
    value = {@value[1], "none", "none", "none"}[1..3];
    return {oname, (value == {"none", "none", "none"}) ? 0 | value};
endif
.

</pre>
<BR>
<BR>
PROPERTY DATA:
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp show_eval_time
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp show_list_all_parens
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp show_list_no_numbers
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp show_copy_expert
<BR>
<RB>
</TR>
</TABLE>
</CENTER>
</BODY>
</HTML>
