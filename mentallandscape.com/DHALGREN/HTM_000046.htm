<HTML>
<HEAD>
<TITLE>Generic Mail Recipient</TITLE>
</HEAD>

<BODY bgcolor=#000000 text=#FF9966 link=#FF6600 vlink=#FFCC99 alink=#FFCC99><CENTER> <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0> <TR>
<TD ALIGN="left" VALIGN="top" WIDTH=550><BR>
<H3> Generic Mail Recipient (#46)</H3>
(an instance of <A HREF="HTM_000001.htm">Root Class</A> made by <A HREF="HTM_000038.htm">Hacker</A>)
<BR>
<BR>
&nbsp&nbsp&nbsp&nbsp&nbspThis can either be a mailing list or a mail folder, depending on what mood you're in...
<BR>
<BR>
<BR>
<BR>
VERB SOURCE CODE:
<BR>
<BR>
set_aliases:
<pre>
"For changing mailing list aliases, we check to make sure that none of the aliases 
match existing mailing list aliases.  Aliases containing spaces are not used in addresses 
and so are not subject to this restriction ($mail_agent:match will not match on them, 
however, so they only match if used in the immediate room, e.g., with match_object() 
or somesuch).";
"  => E_PERM   if you don't own this";
if ((caller != this) && (!$perm_utils:controls(caller_perms(), this)))
    return E_PERM;
elseif (this.location != $mail_agent)
    "... we don't care...";
    return pass(@args);
else
    for a in (aliases = args[1])
        if (index(a, " "))
            "... we don't care...";
        elseif (rp = $mail_agent:reserved_pattern(a))
            player:tell("Mailing list name \"", a, "\" uses a reserved pattern: ", 
rp[1]);
            aliases = setremove(aliases, a);
        elseif (valid(p = $mail_agent:match(a, #-1)) && ((p != this) && (a in p.aliases)))
            player:tell("Mailing list name \"", a, "\" in use on ", p.name, "(", 
p, ")");
            aliases = setremove(aliases, a);
        endif
    endfor
    if (aliases)
        return pass(aliases);
    else
        return 1;
    endif
endif
.

</pre>
<BR>
look_self:
<pre>
namelist = "*" + ((names = this:mail_names()) ? $string_utils:from_list(names, ", 
*") | tostr(this));
if (typeof(fwd = this:mail_forward()) != LIST)
    fwd = {};
endif
if (this:is_writable_by(player))
    if (player in fwd)
        read = " [Writable/Subscribed]";
    else
        read = " [Writable]";
    endif
elseif (typeof(this.readers) != LIST)
    read = tostr(" [Public", (player in fwd) ? "/Subscribed]" | "]");
elseif (player in fwd)
    read = " [Subscribed]";
elseif (this:is_readable_by(player))
    read = " [Readable]";
else
    read = "";
endif
if (this:is_usable_by($no_one))
    mod = "";
elseif (this:is_usable_by(player))
    mod = " [Approved]";
else
    mod = " [Moderated]";
endif
player:tell(namelist, "  (", this, ")", read, mod);
d = this:description();
if (typeof(d) == STR)
    d = {d};
endif
for l in (d)
    if (length(l) <= 75)
        ls = {l};
    else
        ls = $generic_editor:fill_string(l, 76);
    endif
    for line in (ls)
        player:tell("    ", line);
    endfor
endfor
.

</pre>
<BR>
is_writable_by:
<pre>
return $perm_utils:controls(who = args[1], this) || (who in this.writers);
.

</pre>
<BR>
is_readable_by:
<pre>
return (typeof(this.readers) != LIST) || (((who = args[1]) in this.readers) || (this:is_writable_by(who) 
|| $mail_agent:sends_to(1, this, who)));
.

</pre>
<BR>
is_usable_by:
<pre>
who = args[1];
if (this.moderated)
    return (who in this.moderated) || (this:is_writable_by(who) || who.wizard);
else
    return this.guests_can_send_here || (!$object_utils:isa(who, $guest));
endif
.

</pre>
<BR>
mail_notify:
<pre>
if ((args && (!this:is_usable_by(args[1]))) && (!args[1].wizard))
    return this:moderator_notify(@args);
else
    return this.(verb);
endif
.

</pre>
<BR>
mail_forward:
<pre>
if ((args && (!this:is_usable_by(args[1]))) && (!args[1].wizard))
    return this:moderator_forward(@args);
elseif (typeof(mf = this.(verb)) == STR)
    return $string_utils:pronoun_sub(mf, @args);
else
    return mf;
endif
.

</pre>
<BR>
moderator_forward:
<pre>
if (typeof(mf = this.(verb)) == STR)
    return $string_utils:pronoun_sub(mf, args ? args[1] | $player);
else
    return mf;
endif
.

</pre>
<BR>
add_forward:
<pre>
":add_forward(recip[,recip...]) adds new recipients to this list.  Returns a string 
error message or a list of results (recip => success, E_PERM => not allowed, E_INVARG 
=> not a valid recipient, string => other kind of failure)";
if (caller == $mail_editor)
    perms = player;
else
    perms = caller_perms();
endif
result = {};
forward_self = (!this.mail_forward) || (this in this.mail_forward);
    for recip in (args)
        if ((!valid(recip)) || ((!is_player(recip)) && (!($mail_recipient in $object_utils:ancestors(recip)))))
            r = E_INVARG;
        elseif ($perm_utils:controls(perms, this) || ((typeof(this.readers) != LIST) 
&& $perm_utils:controls(perms, recip)))
            this.mail_forward = setadd(this.mail_forward, recip);
            r = recip;
        else
            r = E_PERM;
        endif
        result = listappend(result, r);
    endfor
    if ((length(this.mail_forward) > 1) && ($nothing in this.mail_forward))
        this.mail_forward = setremove(this.mail_forward, $nothing);
    endif
    if (forward_self)
        this.mail_forward = setadd(this.mail_forward, this);
    endif
    return result;
.

</pre>
<BR>
delete_forward:
<pre>
":delete_forward(recip[,recip...]) removes recipients to this list.  Returns a list 
of results (E_PERM => not allowed, E_INVARG => not on list)";
if (caller == $mail_editor)
    perms = player;
else
    perms = caller_perms();
endif
result = {};
forward_self = (!this.mail_forward) || (this in this.mail_forward);
    for recip in (args)
        if (!(recip in this.mail_forward))
            r = E_INVARG;
        elseif (((!valid(recip)) || $perm_utils:controls(perms, recip)) || $perm_utils:controls(perms, 
this))
            if (recip == this)
                forward_self = 0;
                endif
                this.mail_forward = setremove(this.mail_forward, recip);
                r = recip;
            else
                r = E_PERM;
            endif
            result = listappend(result, r);
        endfor
        if (!(forward_self || this.mail_forward))
            this.mail_forward = {$nothing};
        elseif (this.mail_forward == {this})
            this.mail_forward = {};
        endif
        return result;
.

</pre>
<BR>
add_notify:
<pre>
":add_notify(recip[,recip...]) adds new notifiees to this list.  Returns a list of 
results (recip => success, E_PERM => not allowed, E_INVARG => not a valid recipient)";
if (caller == $mail_editor)
    perms = player;
else
    perms = caller_perms();
endif
result = {};
for recip in (args)
    if ((!valid(recip)) || (recip == this))
        r = E_INVARG;
    elseif ($perm_utils:controls(perms, this) || (this:is_readable_by(perms) && $perm_utils:controls(perms, 
recip)))
        this.mail_notify = setadd(this.mail_notify, recip);
        r = recip;
    else
        r = E_PERM;
    endif
    result = listappend(result, r);
endfor
return result;
.

</pre>
<BR>
delete_notify:
<pre>
":delete_notify(recip[,recip...]) removes notifiees from this list.  Returns a list 
of results (E_PERM => not allowed, E_INVARG => not on list)";
if (caller == $mail_editor)
    perms = player;
else
    perms = caller_perms();
endif
result = {};
rmthis = 0;
for recip in (args)
    if (!(recip in this.mail_notify))
        r = E_INVARG;
    elseif ((!valid(recip)) || ($perm_utils:controls(perms, recip) || $perm_utils:controls(perms, 
this)))
        if (recip == this)
            rmthis = 1;
        endif
        this.mail_notify = setremove(this.mail_notify, recip);
        r = recip;
    else
        r = E_PERM;
    endif
    result = listappend(result, r);
endfor
return result;
.

</pre>
<BR>
receive_message:
<pre>
if (!this:ok_write(caller, caller_perms()))
    return E_PERM;
else
    this.messages = {@this.messages, {new = this:new_message_num(), args[1]}};
    this.last_msg_date = args[1][1];
    this.last_used_time = time();
    return new;
endif
.

</pre>
<BR>
ok:
<pre>
":ok(caller,callerperms) => true iff caller can do read operations";
return (args[1] in {this, $mail_agent}) || (args[2].wizard || this:is_readable_by(args[2]));
.

</pre>
<BR>
ok_write:
<pre>
":ok_write(caller,callerperms) => true iff caller can do write operations";
return (args[1] in {this, $mail_agent}) || (args[2].wizard || this:is_writable_by(args[2]));
.

</pre>
<BR>
parse_message_seq from_msg_seq %from_msg_seq to_msg_seq %to_msg_seq subject_msg_seq 
body_msg_seq kept_msg_seq unkept_msg_seq display_seq_headers display_seq_full messages_in_seq 
list_rmm new_message_num length_num_le length_date_le length_all_msgs exists_num_eq 
msg_seq_to_msg_num_list msg_seq_to_msg_num_string:
<pre>
":parse_message_seq(strings,cur) => msg_seq";
"";
":from_msg_seq(olist)     => msg_seq of messages from those people";
":%from_msg_seq(strings)  => msg_seq of messages with strings in the From: line";
":to_msg_seq(olist)       => msg_seq of messages to those people";
":%to_msg_seq(strings)    => msg_seq of messages with strings in the To: line";
":subject_msg_seq(target) => msg_seq of messages with target in the Subject:";
":body_msg_seq(target)    => msg_seq of messages with target in the body";
":new_message_num()    => number that the next incoming message will receive.";
":length_num_le(num)   => number of messages in folder numbered <= num";
":length_date_le(date) => number of messages in folder dated <= date";
":length_all_msgs()    => number of messages in folder";
":exists_num_eq(num)   => index of message in folder numbered == num, or 0";
"";
":display_seq_headers(msg_seq[,cur])   display message summary lines";
":display_seq_full(msg_seq[,preamble]) display entire messages";
"            => number of final message displayed";
":list_rmm() displays contents of .messages_going.";
"            => the number of messages in .messages_going.";
"";
":messages_in_seq(msg_seq) => list of messages in msg_seq on folder";
"";
"See the corresponding routines on $mail_agent for more detail.";
return this:ok(caller, caller_perms()) ? $mail_agent:(verb)(@args) | E_PERM;
.

</pre>
<BR>
length_date_gt:
<pre>
":length_date_le(date) => number of messages in folder dated > date";
"";
if (this:ok(caller, caller_perms()))
    date = args[1];
    return (this.last_msg_date <= date) ? 0 | $mail_agent:(verb)(date);
else
    return E_PERM;
endif
.

</pre>
<BR>
rm_message_seq:
<pre>
":rm_message_seq(msg_seq) removes the given sequence of from folder";
"               => string giving msg numbers removed";
"See the corresponding routine on $mail_agent.";
if (this:ok_write(caller, caller_perms()))
    return $mail_agent:(verb)(@args);
elseif (this:ok(caller, caller_perms()) && (seq = this:own_messages_filter(caller_perms(), 
@args)))
    return $mail_agent:(verb)(@listset(args, seq, 1));
else
    return E_PERM;
endif
.

</pre>
<BR>
undo_rmm expunge_rmm renumber keep_message_seq:
<pre>
":rm_message_seq(msg_seq) removes the given sequence of from folder";
"               => string giving msg numbers removed";
":list_rmm()    displays contents of .messages_going.";
"               => number of messages in .messages_going.";
":undo_rmm()    restores previously deleted messages from .messages_going.";
"               => msg_seq of restored messages";
":expunge_rmm() destroys contents of .messages_going once and for all.";
"               => number of messages in .messages_going.";
":renumber([cur])  renumbers all messages";
"               => {number of messages,new cur}.";
"";
"See the corresponding routines on $mail_agent.";
return this:ok_write(caller, caller_perms()) ? $mail_agent:(verb)(@args) | E_PERM;
.

</pre>
<BR>
own_messages_filter:
<pre>
":own_messages_filter(who,msg_seq) => subsequence of msg_seq consisting of those 
messages that <who> is actually allowed to remove (on the assumption that <who> is 
not one of the allowed writers of this folder.";
if (!this.rmm_own_msgs)
    return E_PERM;
elseif ((typeof(seq = this:from_msg_seq({args[1]}, args[2])) != LIST) || (seq != 
args[2]))
    return {};
else
    return seq;
endif
.

</pre>
<BR>
messages:
<pre>
"NOTE:  this routine is obsolete, use :messages_in_seq()";
":messages(num) => returns the message numbered num.";
":messages()    => returns the entire list of messages (can be SLOW).";
if (!this:ok(caller, caller_perms()))
    return E_PERM;
elseif (!args)
    return this:messages_in_seq({1, this:length_all_msgs() + 1});
elseif (!(n = this:exists_num_eq(args[1])))
    return E_RANGE;
else
    return this:messages_in_seq(n)[2];
endif
.

</pre>
<BR>
date_sort:
<pre>
if (!this:ok_write(caller, caller_perms()))
    return E_PERM;
endif
date_seq = {};
for msg in (this.messages)
    date_seq = {@date_seq, msg[2][1]};
endfor
msg_order = $list_utils:sort($list_utils:range(n = length(msgs = this.messages)), 
date_seq);
newmsgs = {};
for i in [1..n]
    if ($command_utils:suspend_if_needed(0))
        player:tell("...", i);
    endif
    newmsgs = {@newmsgs, {i, msgs[msg_order[i]][2]}};
endfor
if (length(this.messages) != n)
    "...shit, new mail received,... start again...";
    fork (0)
        this:date_sort();
    endfork
else
    this.messages = newmsgs;
    this.last_used_time = newmsgs[length(newmsgs)][2][1];
endif
.

</pre>
<BR>
_fix_last_msg_date:
<pre>
mlen = this:length_all_msgs();
this.last_msg_date = mlen && this:messages_in_seq(mlen)[2][1];
.

</pre>
<BR>
moderator_notify:
<pre>
return this.(verb);
.

</pre>
<BR>
msg_summary_line:
<pre>
return $mail_agent:msg_summary_line(@args);
.

</pre>
<BR>
__check:
<pre>
for m in (this.messages)
    $mail_agent:__convert_new(@m[2]);
    $command_utils:suspend_if_needed(0);
endfor
.

</pre>
<BR>
__fix:
<pre>
if (!this:ok_write(caller, caller_perms()))
    return E_PERM;
endif
msgs = {};
i = 1;
for m in (oldmsgs = this.messages)
    msgs = {@msgs, {m[1], $mail_agent:__convert_new(@m[2])}};
    if ($command_utils:running_out_of_time())
        player:notify(tostr("...", i, " ", this));
        suspend(0);
        if (oldmsgs != this.messages)
            return 0;
        endif
    endif
    i = i + 1;
endfor
this.messages = msgs;
return 1;
.

</pre>
<BR>
init_for_core:
<pre>
if (caller_perms().wizard)
    pass();
    if (!(this in {$mail_recipient, $big_mail_recipient}))
        "...generic mail recipients stay in #-1...";
        move(this, $mail_agent);
    endif
endif
.

</pre>
<BR>
initialize:
<pre>
if ($perm_utils:controls(caller_perms(), this))
    this.mail_forward = {};
    return pass(@args);
endif
.

</pre>
<BR>
mail_name_old mail_name:
<pre>
return "*" + this.aliases[1];
.

</pre>
<BR>
mail_names:
<pre>
names = {};
for a in (this.aliases)
    if (!index(a, " "))
        names = setadd(names, strsub(a, "_", "-"));
    endif
endfor
return names;
.

</pre>
<BR>
expire_old_messages:
<pre>
if (this:ok_write(caller, caller_perms()))
    "Passed security check...";
    if (this.expire_period && (rmseq = $seq_utils:remove(this:unkept_msg_seq(), 1 
+ this:length_date_le(time() - this.expire_period))))
        "... i.e., everything not marked kept that is older than expire_period";
        this:rm_message_seq(rmseq);
        return this:expunge_rmm();
    else
        return 0;
    endif
else
    return E_PERM;
endif
.

</pre>
<BR>
moveto:
<pre>
if (this:is_writable_by(caller_perms()) || this:is_writable_by(caller))
    pass(@args);
else
    return E_PERM;
endif
.

</pre>
<BR>
accept_subname:
<pre>
":accept_subname(object,name,perms)";
"is <perms> allowed to make <object> mail subname of this with the given <name>?";
object = args[1];
accept = this.accept_subname;
if (!valid(object))
    return E_INVARG;
elseif ((accept && (typeof(accept) != LIST)) || (this:is_writable_by(object.owner) 
|| this:is_writable_by(perms = args[3])))
    "...writers can do anything...";
    "... .accept_subname==1 => anyone can do anything...";
    return 1;
elseif (accept && ((object in accept) || ({object, args[2]} in accept)))
    "... object/name is explicitly sanctioned";
    return 1;
elseif (object in $mail_name_db:find_all(tostr(this, ":")))
    "...object is already a subname...";
    "...allow name change unless .accept_subname specifies a name";
    return !(accept && (a = $list_utils:assoc(object, accept)));
else
    return 0;
endif
.

</pre>
<BR>
mail_name_new mail_name:
<pre>
return (!(names = this.names)) ? "" | (((name = names[1])[1] == #-1) ? "*" + name[2] 
| tostr(is_player(name[1]) ? name[1].name | ("*" + name[1]:(verb)()), ":", name[2]));
.

</pre>
<BR>
@mail-n*ame:
<pre>
"@mail_name <this> is whatever";
if (!this:is_writable_by(player))
    player:tell(E_PERM);
    return;
endif
if (h = rindex(iobjstr, ":"))
    if ($mail_agent:match_failed(head = $mail_agent:match_new(iobjstr[1..h]), iobjstr[1..h]))
        return;
    elseif (!(name = iobjstr[h + 1..length(iobjstr)]))
        player:tell("Recipient cannot have a blank name.");
        return;
    endif
elseif (this.names && $object_utils:isa(head = this.names[1][1], $mail_recipient))
    name = iobjstr;
else
    player:tell("No names have yet been given to this recipient.");
    player:tell("You need to specify a full path.");
    return;
endif
if (e = $mail_agent:set_mail_name(this, head, name))
    player:tell("Name set to ", this:mail_name_new(), ".");
elseif (e == E_NACC)
    player:tell(head:mail_name_new(), " does not want ", this, " to be a subname.");
elseif (e == E_RECMOVE)
    player:tell(head:mail_name_new(), " is a name-descendant of ", this, ".");
elseif (e == E_INVARG)
    player:tell("Name must contain no parentheses, colons or stars.");
else
    player:tell(e);
endif
.

</pre>
<BR>
@rm-mail-n*ame @remove-mail-n*ame:
<pre>
"@rm-mail-name whatever from <this>";
if (!this:is_writable_by(player))
    player:tell(E_PERM);
    return;
elseif (!this.names)
    player:tell("This recipient has no names.");
    return;
endif
if (h = rindex(dobjstr, ":"))
    if ($mail_agent:match_failed(head = $mail_agent:match_new(dobjstr[1..h]), dobjstr[1..h]))
        return;
    endif
    name = dobjstr[h + 1..length(dobjstr)];
    nlist = this.names;
    while ((i = $list_utils:iassoc(head, nlist)) && (name && (name != nlist[i][2])))
        nlist[1..i] = {};
    endwhile
    if (i)
        "...no problem...";
    elseif (name)
        player:tell("Recipient does not have that name");
        return;
    else
        player:tell("Recipient does not have any names under ", head:mail_name_new(), 
": (", head, ").");
        return;
    endif
    name = nlist[i][2];
elseif (a = $list_utils:assoc(name = dobjstr, this.names, 2))
    head = a[1];
else
    player:tell("Recipient does not have that name");
    return;
endif
if (e = $mail_agent:remove_mail_name(this, head, name))
    player:tell("Removed name ", head:mail_name_new(), ":", name, " from ", this:mail_name_new(), 
" (", this, ").");
else
    player:tell(e);
endif
.

</pre>
<BR>
@add-mail-n*ame:
<pre>
"@add-mail-name whatever to <this>";
if (!this:is_writable_by(player))
    player:tell(E_PERM);
    return;
endif
if (h = rindex(dobjstr, ":"))
    if ($mail_agent:match_failed(head = $mail_agent:match_new(dobjstr[1..h]), dobjstr[1..h]))
        return;
    elseif (!(name = dobjstr[h + 1..length(dobjstr)]))
        player:tell("Recipient cannot have a blank name.");
        return;
    endif
elseif (this.names && $object_utils:isa(head = this.names[1][1], $mail_recipient))
    name = dobjstr;
else
    player:tell("No names have yet been given to this recipient.");
    player:tell("You need to specify a full path.");
    return;
endif
if (e = $mail_agent:add_mail_name(this, head, name))
    player:tell("Added name ", head:mail_name_new(), ":", name, " to ", $mail_agent:name_new(this), 
".");
elseif (e == E_NACC)
    player:tell(head:mail_name_new(), " does not want ", this, " to be a subname.");
elseif (e == E_RECMOVE)
    player:tell(head:mail_name_new(), " is a name-descendant of ", this, ".");
elseif (e == E_INVARG)
    player:tell("Name must contain no parentheses, colons or stars.");
else
    player:tell(e);
endif
.

</pre>
<BR>
<BR>
PROPERTY DATA:
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp moderator_notify
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp last_msg_date
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp messages_going
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp moderated
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp moderator_forward
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp writers
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp readers
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp mail_notify
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp mail_forward
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp expire_period
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp last_used_time
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp messages
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp rmm_own_msgs
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp guests_can_send_here
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp names
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp accept_subname
<BR>
&nbsp&nbsp&nbsp&nbsp&nbsp messages_kept
<BR>
<RB>
<BR>
CHILDREN:
<BR>
<A HREF="HTM_000036.htm">Quota-Log</A> <A HREF="HTM_000031.htm">New-Prog-Log</A> <A HREF="HTM_000016.htm">Generic Large-Capacity Mail Recipient</A> <A HREF="HTM_000070.htm">Site-Locks</A> <A HREF="HTM_000102.htm">Wizard-Mail</A> <A HREF="HTM_000107.htm">graffiti</A> <A HREF="HTM_000108.htm">Core-Updates</A> <A HREF="HTM_000327.htm">Quota-Requests</A> <A HREF="HTM_001443.htm">Text</A> <A HREF="HTM_001429.htm">cuffs</A> <A HREF="HTM_002006.htm">boot-log</A> <A HREF="HTM_002163.htm">coolthingstoread</A> <A HREF="HTM_002285.htm">I'd-Rather-Be-Smashing-the-MOO</A> <A HREF="HTM_002454.htm">web</A> <RB>
<BR>
MAIL MESSAGES:
<BR>
<BR>
</TR>
</TABLE>
</CENTER>
</BODY>
</HTML>
